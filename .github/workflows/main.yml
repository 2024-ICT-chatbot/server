name: CI/CD Pipeline with Docker

on:
  push:
    branches: [develop]
  pull_request:
    branches: [develop]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/ict-app:latest

      - name: Deploy to EC2
        env:
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
        run: |
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > private_key
          chmod 600 private_key
          mkdir -p ~/.ssh
          ssh-keyscan -H $HOST >> ~/.ssh/known_hosts

          ssh -i private_key -o StrictHostKeyChecking=accept-new ${USER}@${HOST} '
            # Pull the latest Docker image
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/ict-app:latest

            # Stop and remove the old container if it exists
            docker stop ict-container || true
            docker rm ict-container || true

            # Run the new container
            docker run -d --name ict-container -p 8000:8000 \
              -e OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
              -e DB_HOST=${{ secrets.DB_HOST }} \
              -e DB_USER=${{ secrets.DB_USER }} \
              -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              -e DB_NAME=${{ secrets.DB_NAME }} \
              ${{ secrets.DOCKERHUB_USERNAME }}/ict-app:latest

            echo "ICT application deployed and started"
          '
