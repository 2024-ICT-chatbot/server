name: Optimized CI/CD Pipeline

on:
  push:
    branches: [develop]
  pull_request:
    branches: [develop]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install Poetry
        run: |
          pip install poetry
          poetry config virtualenvs.create false

      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install dependencies
        run: poetry install

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          tags: user/app:latest
          outputs: type=docker,dest=/tmp/myimage.tar
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache || true

      - name: Compress Docker image
        run: gzip /tmp/myimage.tar

      - name: Deploy to EC2
        env:
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
        run: |
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > private_key
          chmod 600 private_key
          scp -i private_key -o StrictHostKeyChecking=no -C /tmp/myimage.tar.gz ${USER}@${HOST}:~
          ssh -i private_key -o StrictHostKeyChecking=no ${USER}@${HOST} '
            gunzip myimage.tar.gz
            docker load < myimage.tar
            docker stop myapp || true
            docker rm myapp || true
            docker run -d --name myapp -p 8000:8000 \
              -e OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
              -e MILVUS_HOST="${{ secrets.MILVUS_HOST }}" \
              -e MILVUS_PORT="${{ secrets.MILVUS_PORT }}" \
              -e DB_HOST="${{ secrets.DB_HOST }}" \
              -e DB_USER="${{ secrets.DB_USER }}" \
              -e DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
              -e DB_NAME="${{ secrets.DB_NAME }}" \
              -v ${HOME}/faiss_index:/code/faiss_index \
              user/app:latest
            rm myimage.tar
          '
